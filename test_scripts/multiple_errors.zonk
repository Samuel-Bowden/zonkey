# Program with multiple errors to test the parsers error handling and synchronisation

function bad_for_loop() {
	# Bad 'for' call
	for (let i = 0, i < 10) {
		cli:println(i);
	}

	cli:println("End");

	# variable i is not in scope, but won't be detected as the parser should abort this function
	# after error is detected in for loop (hard to synchronise when block has been added for parameters)
	cli:println("Finished with i = " + (String i));
}

# Return type should be integer
function plus_one(Integer val) -> Boolean {
	return val + 1;
}

start {
	# Pointless cast as return type of function should be integer
	if (Boolean plus_one(0)) {
		cli:println("Hello");
	} else {
		cli:println("Bye");
	}

	# Call to non-existent function
	println("hello");
	
	# While cannot have two arguments
	while (true, false) {

	}

	bad_for_loop();

	# Missing brackets on if statement
	if true {
		println("Hello");
	}

	# Forgot semi-colon to end statement
	cli:println("hello")

	let a = 1;

	# Shouldn't be able to add string to integer
	a += "Hello";

	# Should work
	a += Integer 64.3;
}

# Invalid code in the global scope
while (true) {
	cli:println("true");
}
