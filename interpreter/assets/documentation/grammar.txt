program = (function / start / class)*;

string = '"' [^"]* '"'
integer = [0-9]+
float = [0-9]+ "." ([0-9]*)?
boolean = "true" / "false"
identifier = [a-zA-Z_][a-zA-Z_]*

start = "start" block
function = "function" identifier parameters (return_type)? block
class = "class" identifier "{" property* (method / constructor)* "}"
property = type _ identifier ";"
method = "method" identifier parameters (return_type)? block
constructor = "constructor" parameters (return_type)? block
parameters = "(" (parameter ("," parameter)*)? ")"
parameter = type _ identifier
return_type = "->" type
type = identifier / "[" identifier "]"
_  = [ \t\r\n]*

block = "{" (stmt)* "}"
stmt = terminated_stmt / if_stmt / loop_stmt / while_stmt / for_stmt / block
terminated_stmt = ("break" / "continue" / return_stmt / var_init / expr_stmt) ";"
return_stmt = "return" expr?
expr_stmt = (expr ("=" / "+=" / "-=" / "/=" / "*="))? expr
var_init = "let" identifier "=" expr
if_stmt = "if" "(" expr ")" stmt else stmt / "if" "(" expr ")" stmt
for_stmt = "for" "(" var_init "," expr "," expr_stmt ")" stmt
while_stmt = "while" "(" expr ")" stmt
loop_stmt = "loop" block

expr = or
or = and / ("|" and)
and = equality / ("&" equality)
equality = comparision (("==" / "!=") comparision)*;
comparision = addsub ((">=" / "<=" / ">" / "<") addsub)*
addsub = multdiv (("-" / "+") multdiv)*
multdiv = unary (("/" / "*") unary)*
unary =  value / ("-" / "!") unary)
value = (string / integer / float / boolean / grouping / call_or_var)
grouping = "(" expr ")"
call_or_var = (function_call / identifier / property_accessor / array_constructor) (method_call)*
function_call = identifier "(" arguments ")"
method_call = "." identifier "(" arguments ")"
property_accessor = "@" identifier
array_constructor = type "[" arguments "]"
arguments = (expr ("," expr)*)?
