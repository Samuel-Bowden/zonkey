function is_operator(String token) -> Boolean {
    return token == "/" | token == "*" | token == "+" | token == "-";
}

class Token {
    # True number, False operator 
    Boolean number;
    String lexeme;

    constructor(Boolean number, String lexeme) {
        @number = number;
        @lexeme = lexeme;
    }

    method is_number() -> Boolean { return @number; }

    method get_number() -> Float { return string_to_float(@lexeme); }

    method higher() -> Boolean {
        return @lexeme == "/" | @lexeme == "*";
    }

    method lexeme() -> String { return @lexeme; }
}

class Calculator {
    String screen_state;
    [Token] expression;
    [Token] output;
    String current_number;

    constructor() {
        @screen_state = "0";
        @expression = Token[];
    }

    method syntax_error() {
        @expression = Token[];
        @current_number = "";
        @screen_state = "Syntax Error";
    }

    method shunting_yard() {
        let operators_stack = Token[];
        @output = Token[];

        for (let i = 0, i < @expression.len(), i += 1) {
            let token = @expression.get(i);
            
            if (token.is_number()) {
                @output.push(token);
            } else {
                while (operators_stack.len() > 0 & operators_stack.get(operators_stack.len() - 1).higher()) {
                    @output.push(operators_stack.remove(operators_stack.len() - 1));
                }
                operators_stack.push(token);
            }
        }

        while (operators_stack.len() > 0) {
            @output.push(operators_stack.remove(operators_stack.len() - 1));
        }
    }

    method evaluate() {
        let stack = Float[];

        for (let i = 0, i < @output.len(), i += 1) {
            let token = @output.get(i);

            if (token.is_number()) {
                stack.push(token.get_number());
            } else {
                let op_two = stack.remove(stack.len() - 1);
                let op_one = stack.remove(stack.len() - 1);

                if (token.lexeme() == "+")
                    op_one += op_two;
                else if (token.lexeme() == "-")
                    op_one -= op_two;
                else if (token.lexeme() == "/")
                    op_one /= op_two;
                else if (token.lexeme() == "*")
                    op_one *= op_two;

                stack.push(op_one);
            }
        }

        let result = float_to_string(stack.get(0));
        if (result == "inf") {
            @current_number = "";
            @screen_state = "Infinite Number Error";
        }
        else {
            @current_number = result;
            @screen_state = result;
        }
    }

    method calculate() {
        # Check for syntax errors
        let last_token_op = true;
        for (let i = 0, i < @expression.len(), i += 1) {
            let this_token_op = !@expression.get(i).is_number();
            if (last_token_op & this_token_op) {
                self.syntax_error();
                return;
            }
            last_token_op = this_token_op;
        }

        self.shunting_yard();
        self.evaluate();
        #Make sure to reset expression
        @expression = Token[];
    }

    method reset() {
        @screen_state = "0";
        @expression = Token[];
        @current_number = "";
    }

    method update(String label) {
        if (label == "AC") {
            self.reset();
            return;
        }
        else if (label == "=") {
            if (@current_number != "")
                @expression.push(Token(true, @current_number));
            self.calculate();
            return;
        }
        else if (is_operator(label)) { 
            if (@current_number != "")
                @expression.push(Token(true, @current_number));
            @current_number = "";
            @expression.push(Token(false, label));
        }
        else {
            @current_number += label;
        }

        if (@screen_state == "0" | @screen_state == "Infinite Number Error" | @screen_state == "Syntax Error")
            @screen_state = label;
        else
            @screen_state += label;
    }

    method screen_state() -> String { return @screen_state; }
}

class KeypadButton {
    Button btn;

    constructor(String label) {
        @btn = Button(label)
            .set_padding(40.0, 30.0)
            .set_width_fill();

        if (label == "AC") @btn.set_background_colour("#DD0000");
        else @btn.set_background_colour("#333333");
    }

    method get_btn() -> Button { return @btn; }

    method update(Calculator calc) {
        if (@btn.clicked())
            calc.update(@btn.get_text());
    }
}

class CalculatorApp {
    Button calc_screen;
    Calculator calculator;
    [KeypadButton] keypad_buttons;

    Button install;
    Button dismiss;
    Row install_row;
    Page page;

    constructor() {
        @calculator = Calculator();

        @calc_screen = Button("0")
            .set_width_fill()
            .set_background_colour("#99AA99")
            .set_padding(30., 20.);

        # Generate Keypad
        let keypad_labels = String["7", "4", "1", "AC", "8", "5", "2", "0", "9", "6", "3", "=", "/", "*", "-", "+"];
        let index = 0;
        @keypad_buttons = KeypadButton[];
        let keypad_row = Row();
        for (let i = 0, i < 4, i += 1) {
            let keypad_column = Column().set_max_width(100.0);
            for (let j = 0, j < 4, j += 1) {
                let keypad_button = KeypadButton(keypad_labels.get(index));
                index += 1;
                keypad_column.add(keypad_button.get_btn());
                @keypad_buttons.push(keypad_button);
            }
            keypad_row.add(keypad_column);
        }
        
        @page = Page()
            .set_title("Calculator")
            .set_background_colour("#000000")
            .center()
            .add(@calc_screen)
            .add(keypad_row)
            .set_max_width(480.);

        @install = Button("Install application");
        @dismiss = Button("Dismiss");
        @install_row = Row().add(@install).add(@dismiss).center();

        if (!(args().len() > 0 & args().get(0) == "installed"))
            @page.add(@install_row);

        set_page(@page);
    }
    
    method run() {
        while (wait_for_event()) {
            for (let i = 0, i < @keypad_buttons.len(), i += 1) {
                let keypad_button = @keypad_buttons.get(i);
                keypad_button.update(@calculator);
            }
            
            if (@install.clicked()) {
                let arguments = String[
                    "Calculator",
                    "zonkey:calculator/Calculator.lnk",
                    "zonkey:calculator/Calculator.desktop",
                    "zonkey:calculator/app.zonk"
                ];
                open_link("zonkey:installer.zonk", arguments);
            }

            if (@dismiss.clicked()) @page.remove(@install_row);
            if (@calc_screen.clicked()) @calculator.reset();

            @calc_screen.set_text(@calculator.screen_state());
        }
    }
}

start { CalculatorApp().run(); }
