Running C++
g++ (GCC) 12.2.1 20230201
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


 Performance counter stats for './objects_arrays' (10 runs):

            112.76 msec task-clock:u                     #    9.709 CPUs utilized               ( +-  9.60% )
                 0      context-switches:u               #    0.000 /sec
                 0      cpu-migrations:u                 #    0.000 /sec
             2,040      page-faults:u                    #   32.874 K/sec                       ( +-  9.57% )
       396,406,672      cycles:u                         #    6.388 GHz                         ( +-  9.55% )
         3,013,290      stalled-cycles-frontend:u        #    1.38% frontend cycles idle        ( +-  9.62% )
        66,597,434      stalled-cycles-backend:u         #   30.58% backend cycles idle         ( +-  9.58% )
       882,305,709      instructions:u                   #    4.05  insn per cycle
                                                  #    0.04  stalled cycles per insn     ( +-  9.57% )
       156,894,381      branches:u                       #    2.528 G/sec                       ( +-  9.57% )
           281,013      branch-misses:u                  #    0.33% of all branches             ( +-  9.58% )

          0.011614 +- 0.000114 seconds time elapsed  ( +-  0.98% )

-----
Running Python
Python 3.10.10

 Performance counter stats for 'python objects_arrays.py' (10 runs):

         31,867.31 msec task-clock:u                     #    9.996 CPUs utilized               ( +-  9.60% )
                 0      context-switches:u               #    0.000 /sec
                 0      cpu-migrations:u                 #    0.000 /sec
            15,191      page-faults:u                    #  873.273 /sec                        ( +-  9.57% )
   135,867,630,724      cycles:u                         #    7.811 GHz                         ( +-  9.59% )
        32,136,328      stalled-cycles-frontend:u        #    0.04% frontend cycles idle        ( +- 11.03% )
    76,943,406,260      stalled-cycles-backend:u         #  103.26% backend cycles idle         ( +-  9.59% )
   496,941,883,437      instructions:u                   #    6.67  insn per cycle
                                                  #    0.09  stalled cycles per insn     ( +-  9.57% )
    96,043,068,871      branches:u                       #    5.521 G/sec                       ( +-  9.57% )
         5,226,921      branch-misses:u                  #    0.01% of all branches             ( +-  9.65% )

            3.1881 +- 0.0188 seconds time elapsed  ( +-  0.59% )

-----
Running JavaScript (Deno)
deno 1.33.0 (release, x86_64-unknown-linux-gnu)
v8 11.4.183.1
typescript 5.0.3

 Performance counter stats for 'deno run objects_arrays.js' (10 runs):

          1,860.82 msec task-clock:u                     #   11.304 CPUs utilized               ( +-  9.60% )
                 0      context-switches:u               #    0.000 /sec
                 0      cpu-migrations:u                 #    0.000 /sec
            68,017      page-faults:u                    #   66.541 K/sec                       ( +-  9.57% )
     6,767,853,686      cycles:u                         #    6.621 GHz                         ( +-  9.61% )
        62,753,585      stalled-cycles-frontend:u        #    1.69% frontend cycles idle        ( +-  9.93% )
     4,749,105,987      stalled-cycles-backend:u         #  127.66% backend cycles idle         ( +-  9.47% )
     7,560,530,507      instructions:u                   #    2.03  insn per cycle
                                                  #    0.35  stalled cycles per insn     ( +-  9.58% )
     2,072,842,999      branches:u                       #    2.028 G/sec                       ( +-  9.58% )
         7,800,523      branch-misses:u                  #    0.68% of all branches             ( +-  9.53% )

          0.164609 +- 0.000881 seconds time elapsed  ( +-  0.54% )

-----
Running JavaScript (Bun)
0.5.9

 Performance counter stats for 'bun run objects_arrays.js' (10 runs):

            728.22 msec task-clock:u                     #   12.172 CPUs utilized               ( +-  9.40% )
                 0      context-switches:u               #    0.000 /sec
                 0      cpu-migrations:u                 #    0.000 /sec
            14,811      page-faults:u                    #   36.825 K/sec                       ( +-  9.79% )
     2,367,134,042      cycles:u                         #    5.885 GHz                         ( +-  9.34% )
        39,042,734      stalled-cycles-frontend:u        #    2.96% frontend cycles idle        ( +-  9.08% )
       642,612,387      stalled-cycles-backend:u         #   48.65% backend cycles idle         ( +-  9.84% )
     6,460,683,992      instructions:u                   #    4.89  insn per cycle
                                                  #    0.05  stalled cycles per insn     ( +-  9.58% )
     1,780,922,137      branches:u                       #    4.428 G/sec                       ( +-  9.58% )
         5,999,801      branch-misses:u                  #    0.61% of all branches             ( +-  9.57% )

           0.05983 +- 0.00207 seconds time elapsed  ( +-  3.46% )

-----
Running Zonkey
zonkey 1.0.1

 Performance counter stats for 'zonkey run objects_arrays.zonk' (10 runs):

         20,332.07 msec task-clock:u                     #    9.986 CPUs utilized               ( +-  9.58% )
                 0      context-switches:u               #    0.000 /sec
                 0      cpu-migrations:u                 #    0.000 /sec
            12,426      page-faults:u                    #    1.111 K/sec                       ( +-  9.57% )
    86,996,899,590      cycles:u                         #    7.777 GHz                         ( +-  9.58% )
       130,950,322      stalled-cycles-frontend:u        #    0.27% frontend cycles idle        ( +- 10.70% )
    51,973,739,933      stalled-cycles-backend:u         #  108.62% backend cycles idle         ( +-  9.55% )
   167,865,409,351      instructions:u                   #    3.51  insn per cycle
                                                  #    0.17  stalled cycles per insn     ( +-  9.57% )
    32,742,873,028      branches:u                       #    2.927 G/sec                       ( +-  9.57% )
           656,600      branch-misses:u                  #    0.00% of all branches             ( +-  9.84% )

           2.03611 +- 0.00325 seconds time elapsed  ( +-  0.16% )

-----
